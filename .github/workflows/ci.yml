name: CI Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Install Qt6 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qt6-base-dev \
            qt6-webengine-dev \
            qt6-webengine-dev-tools \
            libqt6webenginecore6 \
            libqt6webenginewidgets6 \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            cmake \
            build-essential \
            pkg-config \
            libxkbcommon-dev \
            libgl1-mesa-dev \
            xvfb

      - name: Install Qt6 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install qt6 cmake
          echo "/opt/homebrew/opt/qt6/bin" >> $GITHUB_PATH
          export Qt6_DIR="/opt/homebrew/opt/qt6/lib/cmake/Qt6"

      - name: Install Qt6 (Windows)
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.5.*"
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2019_64"
          modules: "qtwebengine"
          tools: "tools_cmake"
          cache: true

      - name: Configure CMake (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -G "Visual Studio 17 2022" -A x64 ..

      - name: Build (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd build
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel

      - name: Test executable exists (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ -f build/MyBrowser ]; then
            echo "✅ Executable built successfully: build/MyBrowser"
            ls -la build/MyBrowser
          else
            echo "❌ Executable not found!"
            exit 1
          fi

      - name: Test executable exists (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "build\${{ matrix.build_type }}\MyBrowser.exe") {
            Write-Host "✅ Executable built successfully: build\${{ matrix.build_type }}\MyBrowser.exe"
            Get-ChildItem "build\${{ matrix.build_type }}\MyBrowser.exe" | Format-List
          } else {
            Write-Host "❌ Executable not found!"
            exit 1
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: MyBrowser-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/MyBrowser
            build/${{ matrix.build_type }}/MyBrowser.exe
            build/Debug/MyBrowser.exe
            build/Release/MyBrowser.exe
          retention-days: 7
          if-no-files-found: ignore

  # 追加のコード品質チェック
  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check code formatting
        run: |
          echo "🔍 Checking code structure..."
          find src/ -name "*.cpp" -o -name "*.h" | head -10
          echo "📊 C++ files count: $(find src/ -name "*.cpp" -o -name "*.h" | wc -l)"

      - name: Check CMakeLists.txt syntax
        run: |
          echo "🔧 Validating CMakeLists.txt..."
          if [ -f CMakeLists.txt ]; then
            echo "✅ CMakeLists.txt found"
            grep -E "(cmake_minimum_required|project|find_package)" CMakeLists.txt || echo "⚠️ Basic CMake commands check"
          else
            echo "❌ CMakeLists.txt not found"
            exit 1
          fi

      - name: Check build scripts
        run: |
          echo "📋 Checking build scripts..."
          if [ -f build_debug.sh ] && [ -f build_release.sh ]; then
            echo "✅ Build scripts found"
            chmod +x build_debug.sh build_release.sh
          else
            echo "❌ Build scripts not found"
            exit 1
          fi

  # ビルド成功通知
  notify-success:
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Notify build success
        run: |
          echo "🎉 All builds completed successfully!"
          echo "📦 Build artifacts have been uploaded"
          echo "🚀 MyBrowser is ready for deployment"
