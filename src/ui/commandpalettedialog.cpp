#include "commandpalettedialog.h"
#include <QApplication>
#include <QDebug>
#include <QGraphicsDropShadowEffect>
#include <QKeyEvent>
#include <QListWidgetItem>
#include <QScreen>

CommandPaletteDialog::CommandPaletteDialog(QWidget *parent)
    : QDialog(parent), selectedIndex(-1) {
  setupUI();

  // „Çø„Ç§„Éû„Éº„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
  searchTimer = new QTimer(this);
  searchTimer->setSingleShot(true);
  searchTimer->setInterval(200);
  connect(searchTimer, &QTimer::timeout, this, &CommandPaletteDialog::updateSuggestions);

  // „Ç∞„É≠„Éº„Éê„É´„Ç§„Éô„É≥„Éà„Éï„Ç£„É´„Çø„Éº„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
  QApplication::instance()->installEventFilter(this);
}

CommandPaletteDialog::~CommandPaletteDialog() {
  QApplication::instance()->removeEventFilter(this);
}

void CommandPaletteDialog::setupUI() {
  // Spotlight„É©„Ç§„ÇØ„Å™„ÉÄ„Ç§„Ç¢„É≠„Ç∞Ë®≠ÂÆö
  setWindowFlags(Qt::Dialog | Qt::FramelessWindowHint | Qt::WindowStaysOnTopHint);
  setAttribute(Qt::WA_TranslucentBackground);
  setModal(true);

  // „É°„Ç§„É≥„É¨„Ç§„Ç¢„Ç¶„Éà
  mainLayout = new QVBoxLayout(this);
  mainLayout->setContentsMargins(0, 0, 0, 0);

  // „Ç≥„É≥„ÉÜ„Éä„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà
  QWidget *container = new QWidget();
  container->setStyleSheet(
      "QWidget {"
      "  background-color: rgba(25, 25, 25, 240);"
      "  border: 1px solid rgba(255, 255, 255, 0.15);"
      "  border-radius: 16px;"
      "}");

  // „Ç∑„É£„Éâ„Ç¶„Ç®„Éï„Çß„ÇØ„Éà
  QGraphicsDropShadowEffect *shadow = new QGraphicsDropShadowEffect();
  shadow->setBlurRadius(40);
  shadow->setColor(QColor(0, 0, 0, 120));
  shadow->setOffset(0, 8);
  container->setGraphicsEffect(shadow);

  QVBoxLayout *containerLayout = new QVBoxLayout(container);
  containerLayout->setContentsMargins(24, 24, 24, 24);
  containerLayout->setSpacing(16);

  // Ê§úÁ¥¢ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ
  searchInput = new QLineEdit();
  searchInput->setPlaceholderText("Search or type '>' for commands...");
  searchInput->setStyleSheet(
      "QLineEdit {"
      "  background-color: rgba(255, 255, 255, 0.08);"
      "  border: 2px solid rgba(255, 255, 255, 0.12);"
      "  border-radius: 12px;"
      "  padding: 16px 20px;"
      "  font-size: 20px;"
      "  font-weight: 500;"
      "  color: white;"
      "  selection-background-color: rgba(0, 122, 255, 0.4);"
      "}"
      "QLineEdit:focus {"
      "  border-color: rgba(0, 122, 255, 0.6);"
      "  background-color: rgba(255, 255, 255, 0.12);"
      "}"
      "QLineEdit::placeholder {"
      "  color: rgba(255, 255, 255, 0.5);"
      "}");

  connect(searchInput, &QLineEdit::textChanged, this, &CommandPaletteDialog::onTextChanged);
  connect(searchInput, &QLineEdit::returnPressed, this, &CommandPaletteDialog::executeSelected);

  containerLayout->addWidget(searchInput);

  // ÂÄôË£ú„É™„Çπ„Éà
  suggestionsList = new QListWidget();
  suggestionsList->setStyleSheet(
      "QListWidget {"
      "  background-color: transparent;"
      "  border: none;"
      "  outline: none;"
      "  border-radius: 8px;"
      "}"
      "QListWidget::item {"
      "  color: rgba(255, 255, 255, 0.85);"
      "  padding: 12px 16px;"
      "  border: none;"
      "  border-radius: 8px;"
      "  margin: 2px 0px;"
      "  font-size: 15px;"
      "  background-color: transparent;"
      "}"
      "QListWidget::item:hover {"
      "  background-color: rgba(0, 122, 255, 0.15);"
      "  color: white;"
      "}"
      "QListWidget::item:selected {"
      "  background-color: rgba(0, 122, 255, 0.4);"
      "  color: white;"
      "}");

  suggestionsList->setMaximumHeight(320);
  suggestionsList->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
  suggestionsList->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);

  connect(suggestionsList, &QListWidget::itemClicked, this, &CommandPaletteDialog::onItemClicked);

  containerLayout->addWidget(suggestionsList);

  // „Éò„É´„Éó„ÉÜ„Ç≠„Çπ„Éà
  QLabel *helpLabel = new QLabel("‚Üë‚Üì Navigate ‚Ä¢ Enter Select ‚Ä¢ Esc Cancel");
  helpLabel->setStyleSheet(
      "QLabel {"
      "  color: rgba(255, 255, 255, 0.4);"
      "  font-size: 12px;"
      "  padding: 8px 0px;"
      "}");
  helpLabel->setAlignment(Qt::AlignCenter);
  containerLayout->addWidget(helpLabel);

  mainLayout->addWidget(container);

  // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„Çµ„Ç§„Ç∫Ë®≠ÂÆö
  setFixedSize(700, 480);
}

void CommandPaletteDialog::setSearchHistory(const QStringList &history) {
  searchHistory = history;
}

void CommandPaletteDialog::showCentered() {
  qDebug() << "CommandPaletteDialog::showCentered() called"; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ

  // ÁîªÈù¢‰∏≠Â§Æ„Å´Ë°®Á§∫
  if (QScreen *screen = QApplication::primaryScreen()) {
    QRect screenGeometry = screen->availableGeometry();
    qDebug() << "Screen geometry:" << screenGeometry; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ

    // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„Çµ„Ç§„Ç∫„ÇíÂèñÂæó
    resize(700, 480); // „Çµ„Ç§„Ç∫„ÇíÊòéÁ§∫ÁöÑ„Å´Ë®≠ÂÆö
    QRect dialogGeometry = geometry();
    qDebug() << "Dialog geometry:" << dialogGeometry; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ

    int x = screenGeometry.x() + (screenGeometry.width() - width()) / 2;
    int y = screenGeometry.y() + screenGeometry.height() / 4; // Spotlight„ÅÆ„Çà„ÅÜ„Å´Â∞ë„Åó‰∏ä„Å´ÈÖçÁΩÆ

    qDebug() << "Moving dialog to:" << x << y; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
    move(x, y);
  }

  qDebug() << "Showing dialog..."; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
  show();
  activateWindow();
  raise();
  searchInput->setFocus();
  searchInput->selectAll();

  // ÂàùÊúüÂÄôË£ú„ÇíË°®Á§∫
  populateSuggestions("");
  qDebug() << "Dialog should be visible now"; // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
}

void CommandPaletteDialog::keyPressEvent(QKeyEvent *event) {
  switch (event->key()) {
  case Qt::Key_Escape:
    reject();
    break;
  case Qt::Key_Up:
    event->accept();
    selectPreviousItem();
    break;
  case Qt::Key_Down:
    event->accept();
    selectNextItem();
    break;
  case Qt::Key_Return:
  case Qt::Key_Enter:
    event->accept();
    executeSelected();
    break;
  default:
    QDialog::keyPressEvent(event);
    break;
  }
}

void CommandPaletteDialog::showEvent(QShowEvent *event) {
  QDialog::showEvent(event);
  selectedIndex = -1;
  suggestionsList->clearSelection();
}

bool CommandPaletteDialog::eventFilter(QObject *object, QEvent *event) {
  if (event->type() == QEvent::MouseButtonPress) {
    QMouseEvent *mouseEvent = static_cast<QMouseEvent *>(event);
    if (!geometry().contains(mouseEvent->globalPosition().toPoint())) {
      reject();
      return true;
    }
  }
  return QDialog::eventFilter(object, event);
}

void CommandPaletteDialog::onTextChanged(const QString &text) {
  searchTimer->stop();
  selectedIndex = -1;
  suggestionsList->clearSelection();

  searchTimer->start();
}

void CommandPaletteDialog::onItemClicked() {
  executeSelected();
}

void CommandPaletteDialog::updateSuggestions() {
  QString text = searchInput->text();
  if (text.startsWith(">")) {
    populateCommands(text.mid(1).trimmed());
  } else {
    populateSuggestions(text);
  }
}

void CommandPaletteDialog::populateSuggestions(const QString &query) {
  suggestionsList->clear();

  if (query.isEmpty()) {
    // Â±•Ê≠¥„ÇíË°®Á§∫
    if (!searchHistory.isEmpty()) {
      QListWidgetItem *headerItem = new QListWidgetItem("üïí Recent Searches");
      headerItem->setData(Qt::UserRole, "header");
      headerItem->setFlags(headerItem->flags() & ~Qt::ItemIsSelectable);
      suggestionsList->addItem(headerItem);

      for (int i = 0; i < qMin(5, searchHistory.size()); ++i) {
        QListWidgetItem *item = new QListWidgetItem(QString("   %1").arg(searchHistory[i]));
        item->setData(Qt::UserRole, "search");
        suggestionsList->addItem(item);
      }
    }

    // „Ç≥„Éû„É≥„ÉâÂÄôË£ú
    QListWidgetItem *cmdHeaderItem = new QListWidgetItem("‚åò Commands (type '>' for more)");
    cmdHeaderItem->setData(Qt::UserRole, "header");
    cmdHeaderItem->setFlags(cmdHeaderItem->flags() & ~Qt::ItemIsSelectable);
    suggestionsList->addItem(cmdHeaderItem);

    QStringList quickCommands = {"New Tab", "Close Tab", "Reload", "History", "Bookmarks"};
    for (const QString &cmd : quickCommands) {
      QListWidgetItem *item = new QListWidgetItem(QString("   %1").arg(cmd));
      item->setData(Qt::UserRole, "command");
      suggestionsList->addItem(item);
    }
  } else {
    // Ê§úÁ¥¢ÂÄôË£ú
    QListWidgetItem *searchItem = new QListWidgetItem(QString("üîç Search for \"%1\"").arg(query));
    searchItem->setData(Qt::UserRole, "search");
    suggestionsList->addItem(searchItem);

    // URLÂÄôË£ú
    if (query.contains(".") && !query.contains(" ")) {
      QListWidgetItem *urlItem = new QListWidgetItem(QString("üåê Go to %1").arg(query));
      urlItem->setData(Qt::UserRole, "url");
      suggestionsList->addItem(urlItem);
    }

    // Â±•Ê≠¥„Åã„ÇâÈñ¢ÈÄ£È†ÖÁõÆ
    for (const QString &history : searchHistory) {
      if (history.contains(query, Qt::CaseInsensitive) && history != query) {
        QListWidgetItem *item = new QListWidgetItem(QString("üïí %1").arg(history));
        item->setData(Qt::UserRole, "search");
        suggestionsList->addItem(item);

        if (suggestionsList->count() >= 8)
          break; // ÊúÄÂ§ß8È†ÖÁõÆ
      }
    }
  }
}

void CommandPaletteDialog::populateCommands(const QString &query) {
  suggestionsList->clear();

  QStringList allCommands = {
      "New Tab", "Close Tab", "New Window", "Close Window",
      "Reload", "Hard Reload", "Stop", "Go Back", "Go Forward",
      "Zoom In", "Zoom Out", "Reset Zoom", "Toggle Fullscreen",
      "Add Bookmark", "Show Bookmarks", "Show History", "Clear History",
      "Show Downloads", "Developer Tools", "View Source",
      "New Workspace", "Switch Workspace", "Rename Workspace",
      "Picture in Picture", "Find in Page", "Print Page", "Save Page"};

  // „ÇØ„Ç®„É™„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  QStringList matchingCommands;
  if (query.isEmpty()) {
    matchingCommands = allCommands;
  } else {
    for (const QString &cmd : allCommands) {
      if (cmd.contains(query, Qt::CaseInsensitive)) {
        matchingCommands.append(cmd);
      }
    }
  }

  // „Ç≥„Éû„É≥„ÉâÂÄôË£ú„ÇíËøΩÂä†
  for (const QString &cmd : matchingCommands) {
    QListWidgetItem *item = new QListWidgetItem(QString("‚åò %1").arg(cmd));
    item->setData(Qt::UserRole, "command");
    suggestionsList->addItem(item);

    if (suggestionsList->count() >= 12)
      break; // ÊúÄÂ§ß12È†ÖÁõÆ
  }
}

void CommandPaletteDialog::selectNextItem() {
  if (suggestionsList->count() == 0)
    return;

  do {
    selectedIndex++;
    if (selectedIndex >= suggestionsList->count()) {
      selectedIndex = 0;
    }
  } while (isHeaderItem(suggestionsList->item(selectedIndex)) && selectedIndex < suggestionsList->count());

  suggestionsList->setCurrentRow(selectedIndex);
}

void CommandPaletteDialog::selectPreviousItem() {
  if (suggestionsList->count() == 0)
    return;

  do {
    selectedIndex--;
    if (selectedIndex < 0) {
      selectedIndex = suggestionsList->count() - 1;
    }
  } while (isHeaderItem(suggestionsList->item(selectedIndex)) && selectedIndex >= 0);

  suggestionsList->setCurrentRow(selectedIndex);
}

void CommandPaletteDialog::executeSelected() {
  QString query = searchInput->text().trimmed();

  // ÈÅ∏Êäû„Åï„Çå„ÅüÈ†ÖÁõÆ„Åå„ÅÇ„ÇãÂ†¥Âêà
  if (selectedIndex >= 0 && selectedIndex < suggestionsList->count()) {
    QListWidgetItem *selectedItem = suggestionsList->item(selectedIndex);
    if (selectedItem && !isHeaderItem(selectedItem)) {
      QString itemType = selectedItem->data(Qt::UserRole).toString();
      QString itemText = selectedItem->text();

      if (itemType == "command") {
        // „Ç≥„Éû„É≥„ÉâÂÆüË°å
        QString command = itemText.startsWith("‚åò ") ? itemText.mid(2) : itemText.trimmed();
        executeCommand(command);
        return;
      } else if (itemType == "search" || itemType == "url") {
        // Ê§úÁ¥¢„Åæ„Åü„ÅØURL
        QString searchQuery = itemText;
        if (searchQuery.startsWith("üîç Search for \"") && searchQuery.endsWith("\"")) {
          searchQuery = searchQuery.mid(16, searchQuery.length() - 17);
        } else if (searchQuery.startsWith("üåê Go to ")) {
          searchQuery = searchQuery.mid(10);
        } else if (searchQuery.startsWith("üïí ")) {
          searchQuery = searchQuery.mid(3);
        } else if (searchQuery.startsWith("   ")) {
          searchQuery = searchQuery.trimmed();
        }
        executeSearch(searchQuery);
        return;
      }
    }
  }

  // ÈÅ∏ÊäûÈ†ÖÁõÆ„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅÁõ¥Êé•ÂÖ•Âäõ„ÇíÂá¶ÁêÜ
  if (query.startsWith(">")) {
    executeCommand(query.mid(1).trimmed());
  } else if (!query.isEmpty()) {
    executeSearch(query);
  }
}

void CommandPaletteDialog::executeSearch(const QString &query) {
  emit searchRequested(query);
  accept();
}

void CommandPaletteDialog::executeCommand(const QString &command) {
  emit commandRequested(command);
  accept();
}

bool CommandPaletteDialog::isHeaderItem(QListWidgetItem *item) const {
  if (!item)
    return false;
  return item->data(Qt::UserRole).toString() == "header";
}
